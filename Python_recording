import os
import sys
import serial
import numpy as np
import matplotlib.pyplot as plt
import threading

# --------------------------- Configuration ---------------------------
SERIAL_PORT = "COM3"       # Change this to match your system, e.g. "/dev/ttyUSB0"
BAUD_RATE = 2000000
SAMPLES_PER_FRAME = 1024   # Must match the ESP32 buffer size per frame
NUM_CHANNELS = 4           # 4 microphones
BYTES_PER_SAMPLE = 2       # int16 = 2 bytes

# Root directory where we want to store raw data
# Each session subfolder will be placed here (Session_01, Session_02, etc.)
ROOT_PATH = r"C:\Users\vlady\PycharmProjects\micarrayESP32\RAW2"

# A global event to signal that we should stop recording
stop_event = threading.Event()

def input_thread():
    """
    Runs in a separate thread and waits for the user to type 'stop'.
    If the user types 'stop', we set the stop_event so the main loop will exit.
    """
    while True:
        cmd = input().strip().lower()
        if cmd == "stop":
            print("Stop command received. Ending recording...")
            stop_event.set()
            break

def get_next_session_folder(root_path):
    """
    Finds the next available session folder name in sequential order, e.g.:
    Session_01, Session_02, ...
    Returns the full path of the new folder that does NOT already exist.
    """
    index = 1
    while True:
        folder_name = f"Session_{index:02d}"
        full_path = os.path.join(root_path, folder_name)
        if not os.path.exists(full_path):
            return full_path
        index += 1

# ---------------------------------------------------------------------

def read_frame(ser):
    """
    Reads one full frame of audio data from the serial port.
    Returns a list of NumPy arrays [ch1, ch2, ch3, ch4],
    each int16 and length = SAMPLES_PER_FRAME,
    or returns None if incomplete data was read.
    """
    total_audio_bytes = SAMPLES_PER_FRAME * NUM_CHANNELS * BYTES_PER_SAMPLE
    raw_data = ser.read(total_audio_bytes)
    if len(raw_data) < total_audio_bytes:
        return None  # Incomplete data

    # Convert to int16 and de-interleave into separate channels
    data_i16 = np.frombuffer(raw_data, dtype=np.int16)
    channels = []
    for ch in range(NUM_CHANNELS):
        channel_data = data_i16[ch::NUM_CHANNELS]
        channels.append(channel_data)

    return channels

def main():
    # Find the next available session folder automatically
    full_folder_path = get_next_session_folder(ROOT_PATH)
    os.makedirs(full_folder_path, exist_ok=True)
    print(f"Data will be saved into: {full_folder_path}")

    # Open the serial port
    ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
    print(f"Opened {SERIAL_PORT} at {BAUD_RATE} baud.")

    # Prepare one .raw file per channel in append-binary mode
    mic_files = []
    for i in range(NUM_CHANNELS):
        mic_filename = os.path.join(full_folder_path, f"mic{i+1}.raw")
        f = open(mic_filename, "ab")  # 'ab' = append binary
        mic_files.append(f)

    # ------------------- Set up Matplotlib for plotting -------------------
    fig, axes = plt.subplots(NUM_CHANNELS, 1, figsize=(8, 8), sharex=True)
    fig.suptitle("Live Audio from 4 Microphones (No Marker)")

    # Initialize line objects
    lines = []
    for i in range(NUM_CHANNELS):
        axes[i].set_title(f"Mic {i+1}")
        # Set y-axis from -3000 to 3000
        axes[i].set_ylim([-3000, 3000])
        axes[i].set_xlim([0, SAMPLES_PER_FRAME])
        line, = axes[i].plot(np.zeros(SAMPLES_PER_FRAME), color='blue')
        lines.append(line)

    plt.tight_layout()

    # Start the input-thread so user can type "stop"
    threading.Thread(target=input_thread, daemon=True).start()

    # --------------------- Main reading loop -----------------------------
    try:
        while not stop_event.is_set():
            frame = read_frame(ser)
            if frame is None:
                print("Incomplete frame received; skipping.")
                continue

            # 'frame' is [mic1_data, mic2_data, mic3_data, mic4_data]
            # each array is length = SAMPLES_PER_FRAME (int16)

            # Write each channel to its corresponding .raw file
            for ch_index, channel_data in enumerate(frame):
                mic_files[ch_index].write(channel_data.tobytes())

            # Update the live plots
            for ch_index, channel_data in enumerate(frame):
                lines[ch_index].set_ydata(channel_data)

            # Brief pause to let matplotlib update
            plt.pause(0.001)

    except KeyboardInterrupt:
        print("Stopping due to Ctrl+C.")
    finally:
        # Close all files and the serial port
        for f in mic_files:
            f.close()
        ser.close()
        print("All files closed, serial closed. Exiting.")
        plt.close(fig)

if __name__ == "__main__":
    main()
